$version Generated by VerilatedVcd $end
$timescale 1ns $end
 $scope module TOP $end
  $var wire 1 s" clock $end
  $var wire 1 t" reset $end
  $scope module ysyxSoCFull $end
   $var wire 1 s" clock $end
   $var wire 1 t" reset $end
   $var wire 32 # araddr [31:0] $end
   $var wire 1 $ arvalid $end
   $var wire 1 % arready $end
   $var wire 8 & arlen [7:0] $end
   $var wire 2 u" arburst [1:0] $end
   $var wire 32 ' rdata [31:0] $end
   $var wire 2 v" rresp [1:0] $end
   $var wire 1 ( rvalid $end
   $var wire 1 ) rready $end
   $var wire 1 * rlast $end
   $var wire 32 + awaddr [31:0] $end
   $var wire 1 , awvalid $end
   $var wire 1 - awready $end
   $var wire 4 . wstrb [3:0] $end
   $var wire 32 / wdata [31:0] $end
   $var wire 1 0 wvalid $end
   $var wire 1 1 wready $end
   $var wire 2 v" bresp [1:0] $end
   $var wire 1 2 bvalid $end
   $var wire 1 3 bready $end
   $var wire 5 w" delay [4:0] $end
   $var wire 3 x" R_IDLE [2:0] $end
   $var wire 3 y" R_READING [2:0] $end
   $var wire 3 z" R_WAIT_R_READY [2:0] $end
   $var wire 3 x" W_IDLE [2:0] $end
   $var wire 3 y" W_WAIT_AW_VALID [2:0] $end
   $var wire 3 z" W_WAIT_W_VALID [2:0] $end
   $var wire 3 {" W_WRITING [2:0] $end
   $var wire 3 |" W_WAIT_B_READY [2:0] $end
   $var wire 32 4 read_addr_store [31:0] $end
   $var wire 8 5 read_len_store [7:0] $end
   $var wire 32 6 write_addr_store [31:0] $end
   $var wire 32 7 write_data_store [31:0] $end
   $var wire 4 8 write_strb_store [3:0] $end
   $var wire 3 9 r_state [2:0] $end
   $var wire 3 : w_state [2:0] $end
   $var wire 8 ; r_len_cnt [7:0] $end
   $scope module u_top $end
    $var wire 1 s" clock $end
    $var wire 1 t" reset $end
    $var wire 1 }" io_interrupt $end
    $var wire 1 - io_master_awready $end
    $var wire 1 , io_master_awvalid $end
    $var wire 4 ~" io_master_awid [3:0] $end
    $var wire 32 + io_master_awaddr [31:0] $end
    $var wire 8 !# io_master_awlen [7:0] $end
    $var wire 3 x" io_master_awsize [2:0] $end
    $var wire 2 v" io_master_awburst [1:0] $end
    $var wire 1 1 io_master_wready $end
    $var wire 1 0 io_master_wvalid $end
    $var wire 32 / io_master_wdata [31:0] $end
    $var wire 4 . io_master_wstrb [3:0] $end
    $var wire 1 "# io_master_wlast $end
    $var wire 1 3 io_master_bready $end
    $var wire 1 2 io_master_bvalid $end
    $var wire 4 ~" io_master_bid [3:0] $end
    $var wire 2 v" io_master_bresp [1:0] $end
    $var wire 1 % io_master_arready $end
    $var wire 1 $ io_master_arvalid $end
    $var wire 4 ~" io_master_arid [3:0] $end
    $var wire 32 # io_master_araddr [31:0] $end
    $var wire 8 & io_master_arlen [7:0] $end
    $var wire 3 < io_master_arsize [2:0] $end
    $var wire 2 = io_master_arburst [1:0] $end
    $var wire 1 ) io_master_rready $end
    $var wire 1 ( io_master_rvalid $end
    $var wire 4 ~" io_master_rid [3:0] $end
    $var wire 32 ' io_master_rdata [31:0] $end
    $var wire 2 v" io_master_rresp [1:0] $end
    $var wire 1 * io_master_rlast $end
    $var wire 1 ## io_slave_awready $end
    $var wire 1 }" io_slave_awvalid $end
    $var wire 4 ~" io_slave_awid [3:0] $end
    $var wire 32 $# io_slave_awaddr [31:0] $end
    $var wire 8 !# io_slave_awlen [7:0] $end
    $var wire 3 x" io_slave_awsize [2:0] $end
    $var wire 2 v" io_slave_awburst [1:0] $end
    $var wire 1 %# io_slave_wready $end
    $var wire 1 }" io_slave_wvalid $end
    $var wire 32 $# io_slave_wdata [31:0] $end
    $var wire 4 ~" io_slave_wstrb [3:0] $end
    $var wire 1 }" io_slave_wlast $end
    $var wire 1 }" io_slave_bready $end
    $var wire 1 &# io_slave_bvalid $end
    $var wire 4 '# io_slave_bid [3:0] $end
    $var wire 2 (# io_slave_bresp [1:0] $end
    $var wire 1 )# io_slave_arready $end
    $var wire 1 }" io_slave_arvalid $end
    $var wire 4 ~" io_slave_arid [3:0] $end
    $var wire 32 $# io_slave_araddr [31:0] $end
    $var wire 8 !# io_slave_arlen [7:0] $end
    $var wire 3 x" io_slave_arsize [2:0] $end
    $var wire 2 v" io_slave_arburst [1:0] $end
    $var wire 1 }" io_slave_rready $end
    $var wire 1 *# io_slave_rvalid $end
    $var wire 4 +# io_slave_rid [3:0] $end
    $var wire 32 ,# io_slave_rdata [31:0] $end
    $var wire 2 -# io_slave_rresp [1:0] $end
    $var wire 1 .# io_slave_rlast $end
    $var wire 1 s" clk $end
    $var wire 1 t" rst $end
    $var wire 32 > araddr_to_rtc [31:0] $end
    $var wire 1 ? arvalid_to_rtc $end
    $var wire 1 "# arready_from_rtc $end
    $var wire 32 @ rdata_from_rtc [31:0] $end
    $var wire 2 v" rresp_from_rtc [1:0] $end
    $var wire 1 "# rvalid_from_rtc $end
    $var wire 1 A rready_to_rtc $end
    $var wire 8 & arlen_to_xbar [7:0] $end
    $var wire 2 = arburst_to_xbar [1:0] $end
    $var wire 1 * rlast_from_xbar $end
    $var wire 3 B arsize_to_xbar [2:0] $end
    $var wire 32 C araddr_to_xbar [31:0] $end
    $var wire 1 D arvalid_to_xbar $end
    $var wire 1 E rready_to_xbar $end
    $var wire 32 F rdata_from_xbar [31:0] $end
    $var wire 2 v" rresp_from_xbar [1:0] $end
    $var wire 1 G rvalid_from_xbar $end
    $var wire 1 H arready_from_xbar $end
    $var wire 1 /# empty_awready $end
    $var wire 1 0# empty_wready $end
    $var wire 1 1# empty_bvalid $end
    $var wire 2 2# empty_bresp [1:0] $end
    $var wire 8 3# arlen_from_icache [7:0] $end
    $var wire 2 4# arburst_from_icache [1:0] $end
    $var wire 32 I araddr_from_icache [31:0] $end
    $var wire 1 J arvalid_from_icache $end
    $var wire 1 K arready_to_icache $end
    $var wire 32 L rdata_to_icache [31:0] $end
    $var wire 2 v" rresp_to_icache [1:0] $end
    $var wire 1 M rvalid_to_icache $end
    $var wire 1 N rready_from_icache $end
    $var wire 1 O rlast_to_icache $end
    $var wire 32 P pc_from_ifu [31:0] $end
    $var wire 32 Q inst_to_idu [31:0] $end
    $var wire 32 P araddr_from_ifu [31:0] $end
    $var wire 1 R arvalid_from_ifu $end
    $var wire 1 S rready_to_ifu $end
    $var wire 32 T rdata_to_ifu [31:0] $end
    $var wire 2 v" rresp_to_ifu [1:0] $end
    $var wire 1 U rvalid_to_ifu $end
    $var wire 1 V rready_from_ifu $end
    $var wire 1 W is_req_ready_from_idu_to_ifu $end
    $var wire 1 X is_req_valid_from_ifu_to_idu $end
    $var wire 32 Y pc_from_ifu_pip [31:0] $end
    $var wire 32 Z inst_to_idu_pip [31:0] $end
    $var wire 1 [ is_req_valid_from_pipeline_ifu_to_idu $end
    $var wire 1 \ is_req_ready_from_pipeline_idu_to_ifu $end
    $var wire 1 ] is_jalr_out_idu $end
    $var wire 1 ^ is_req_valid_from_idu_to_exu $end
    $var wire 1 _ is_req_ready_from_exu_to_idu $end
    $var wire 32 ` src1_in_idu [31:0] $end
    $var wire 32 a src2_in_idu [31:0] $end
    $var wire 32 b csr_in_idu [31:0] $end
    $var wire 3 c csr_read_id_out_idu [2:0] $end
    $var wire 3 d csr_write_id_out_idu [2:0] $end
    $var wire 32 e src1_out_idu [31:0] $end
    $var wire 32 f src2_out_idu [31:0] $end
    $var wire 32 g lsu_write_data_out_idu [31:0] $end
    $var wire 4 h src1_id_out_idu [3:0] $end
    $var wire 4 i src2_id_out_idu [3:0] $end
    $var wire 32 j imm [31:0] $end
    $var wire 4 k rd_out_idu [3:0] $end
    $var wire 4 l alu_opcode [3:0] $end
    $var wire 1 m reg_write_out_idu $end
    $var wire 2 n lsu_write_out_idu [1:0] $end
    $var wire 3 o lsu_read_out_idu [2:0] $end
    $var wire 1 p ecall_out_idu $end
    $var wire 1 q is_jump_out_idu $end
    $var wire 1 r ebreak_out_idu $end
    $var wire 1 s mret_out_idu $end
    $var wire 32 Y pc_out_idu [31:0] $end
    $var wire 1 t csr_write_out_idu $end
    $var wire 1 u fence_i_out_idu $end
    $var wire 32 Z debug_inst_out_idu [31:0] $end
    $var wire 32 v debug_inst_out_idu_pip [31:0] $end
    $var wire 1 w is_req_ready_from_pipline_exu_to_idu $end
    $var wire 1 x is_req_valid_from_pipeline_idu_to_exu $end
    $var wire 32 y pc_from_idu_pip [31:0] $end
    $var wire 32 z src1_out_idu_pip [31:0] $end
    $var wire 32 { src2_out_idu_pip [31:0] $end
    $var wire 32 | imm_pip [31:0] $end
    $var wire 32 } lsu_write_data_out_idu_pip [31:0] $end
    $var wire 4 ~ alu_opcode_pip [3:0] $end
    $var wire 4 !! rd_out_idu_pip [3:0] $end
    $var wire 3 "! csr_write_id_out_idu_pip [2:0] $end
    $var wire 1 #! is_jalr_out_idu_pip $end
    $var wire 1 $! is_jump_out_idu_pip $end
    $var wire 1 %! reg_write_out_idu_pip $end
    $var wire 1 &! csr_write_out_idu_pip $end
    $var wire 2 '! lsu_write_out_idu_pip [1:0] $end
    $var wire 3 (! lsu_read_out_idu_pip [2:0] $end
    $var wire 1 )! ecall_out_idu_pip $end
    $var wire 1 *! ebreak_out_idu_pip $end
    $var wire 1 +! mret_out_idu_pip $end
    $var wire 1 ,! fence_i_out_idu_pip $end
    $var wire 1 ,! fence_i_out_exu $end
    $var wire 32 -! data_forward_from_exu [31:0] $end
    $var wire 1 .! is_data_forward_valid_from_exu $end
    $var wire 3 "! csr_addr_out_exu [2:0] $end
    $var wire 32 } lsu_write_data_out_exu [31:0] $end
    $var wire 32 -! result_out_exu [31:0] $end
    $var wire 32 /! branch_target_out_exu [31:0] $end
    $var wire 4 !! rd_out_exu [3:0] $end
    $var wire 3 (! lsu_read_out_exu [2:0] $end
    $var wire 2 '! lsu_write_out_exu [1:0] $end
    $var wire 1 0! is_branch_out_exu $end
    $var wire 1 &! csr_write_out_exu $end
    $var wire 1 )! ecall_out_exu $end
    $var wire 1 +! mret_out_exu $end
    $var wire 1 %! reg_write_out_exu $end
    $var wire 1 1! is_req_valid_from_exu_to_lsu $end
    $var wire 1 2! is_req_ready_from_lsu_to_exu $end
    $var wire 1 3! is_req_valid_from_pipeline_exu_to_lsu $end
    $var wire 1 _ is_req_ready_from_pipeline_lsu_to_exu $end
    $var wire 3 4! lsu_read_out_exu_pip [2:0] $end
    $var wire 2 5! lsu_write_out_exu_pip [1:0] $end
    $var wire 32 6! branch_target_out_exu_pip [31:0] $end
    $var wire 32 + result_out_exu_pip [31:0] $end
    $var wire 32 7! lsu_write_data_out_exu_pip [31:0] $end
    $var wire 4 8! rd_out_exu_pip [3:0] $end
    $var wire 1 9! ecall_out_exu_pip $end
    $var wire 1 :! mret_out_exu_pip $end
    $var wire 1 ;! is_branch_out_exu_pip $end
    $var wire 1 <! csr_write_out_exu_pip $end
    $var wire 1 =! reg_write_out_exu_pip $end
    $var wire 1 >! fence_i_out_exu_pip $end
    $var wire 3 ?! csr_addr_out_exu_pip [2:0] $end
    $var wire 1 2! is_data_forward_valid_from_lsu $end
    $var wire 32 @! data_forward_from_lsu [31:0] $end
    $var wire 32 A! debug_pc_from_exu_to_lsu_pip [31:0] $end
    $var wire 32 y debug_pc_from_exu_to_lsu [31:0] $end
    $var wire 32 B! debug_inst_from_exu_to_lsu_pip [31:0] $end
    $var wire 32 v debug_inst_from_exu_to_lsu [31:0] $end
    $var wire 1 C! debug_is_device_lsu_to_wbu $end
    $var wire 1 D! debug_is_device_lsu_to_wbu_pip $end
    $var wire 1 >! fence_i_out_lsu $end
    $var wire 1 =! reg_write_out_lsu $end
    $var wire 3 ?! csr_addr_out_lsu [2:0] $end
    $var wire 1 <! csr_write_out_lsu $end
    $var wire 32 + araddr_from_lsu [31:0] $end
    $var wire 1 E! arvalid_from_lsu $end
    $var wire 3 F! arsize_from_lsu [2:0] $end
    $var wire 1 G! rready_to_lsu $end
    $var wire 32 H! rdata_to_lsu [31:0] $end
    $var wire 2 v" rresp_to_lsu [1:0] $end
    $var wire 1 I! rvalid_to_lsu $end
    $var wire 1 J! rready_from_lsu $end
    $var wire 32 + awaddr_from_lsu [31:0] $end
    $var wire 1 , awvalid_from_lsu $end
    $var wire 1 - awready_to_lsu $end
    $var wire 4 . wstrb_from_lsu [3:0] $end
    $var wire 32 / wdata_from_lsu [31:0] $end
    $var wire 1 0 wvalid_from_lsu $end
    $var wire 1 1 wready_to_lsu $end
    $var wire 2 v" bresp_to_lsu [1:0] $end
    $var wire 1 2 bvalid_to_lsu $end
    $var wire 1 3 bready_from_lsu $end
    $var wire 4 8! rd_out_lsu [3:0] $end
    $var wire 1 :! mret_out_lsu $end
    $var wire 1 9! ecall_out_lsu $end
    $var wire 1 ;! is_branch_out_lsu $end
    $var wire 32 6! branch_target_out_lsu [31:0] $end
    $var wire 32 @! result_out_lsu [31:0] $end
    $var wire 1 2! is_req_valid_from_lsu_to_wbu $end
    $var wire 1 K! is_req_ready_from_wbu_to_lsu $end
    $var wire 32 A! debug_pc_from_lsu_to_wbu [31:0] $end
    $var wire 32 L! debug_pc_from_lsu_to_wbu_pip [31:0] $end
    $var wire 32 B! debug_inst_from_lsu_to_wbu [31:0] $end
    $var wire 32 M! debug_inst_from_lsu_to_wbu_pip [31:0] $end
    $var wire 1 N! pipeline_flush_signal $end
    $var wire 32 6! flush_reset_pc [31:0] $end
    $var wire 1 K! is_req_valid_from_pipeline_lsu_to_wbu $end
    $var wire 1 "# is_req_ready_from_pipeline_wbu_to_lsu $end
    $var wire 32 O! result_out_lsu_pip [31:0] $end
    $var wire 4 P! rd_out_lsu_pip [3:0] $end
    $var wire 1 Q! reg_write_out_lsu_pip $end
    $var wire 1 R! csr_write_out_lsu_pip $end
    $var wire 3 S! csr_addr_out_lsu_pip [2:0] $end
    $var wire 32 O! data_forward_from_wbu [31:0] $end
    $var wire 1 K! is_data_forward_valid_from_wbu $end
    $var wire 32 O! result_out_wbu [31:0] $end
    $var wire 4 P! rd_out_wbu [3:0] $end
    $var wire 1 T! csr_write_out_wbu $end
    $var wire 3 S! csr_addr_out_wbu [2:0] $end
    $var wire 1 U! reg_write_out_wbu $end
    $scope module u_ysyx_25040129_BUSARB $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 32 I icache_araddr [31:0] $end
     $var wire 1 J icache_arvalid $end
     $var wire 1 K icache_arready $end
     $var wire 8 3# icache_arlen [7:0] $end
     $var wire 2 4# icache_arburst [1:0] $end
     $var wire 32 L icache_rdata [31:0] $end
     $var wire 2 v" icache_rresp [1:0] $end
     $var wire 1 M icache_rvalid $end
     $var wire 1 N icache_rready $end
     $var wire 1 O icache_rlast $end
     $var wire 32 + lsu_araddr [31:0] $end
     $var wire 1 E! lsu_arvalid $end
     $var wire 1 G! lsu_arready $end
     $var wire 3 F! lsu_arsize [2:0] $end
     $var wire 32 H! lsu_rdata [31:0] $end
     $var wire 2 v" lsu_rresp [1:0] $end
     $var wire 1 I! lsu_rvalid $end
     $var wire 1 J! lsu_rready $end
     $var wire 32 C araddr [31:0] $end
     $var wire 1 D arvalid $end
     $var wire 3 B arsize [2:0] $end
     $var wire 1 H arready $end
     $var wire 8 & arlen [7:0] $end
     $var wire 2 = arburst [1:0] $end
     $var wire 32 F rdata [31:0] $end
     $var wire 2 v" rresp [1:0] $end
     $var wire 1 G rvalid $end
     $var wire 1 E rready $end
     $var wire 1 * rlast $end
     $var wire 2 v" IDLE [1:0] $end
     $var wire 2 4# HANDLE_IFU [1:0] $end
     $var wire 2 5# HANDLE_LSU [1:0] $end
     $var wire 2 V! state [1:0] $end
     $var wire 2 W! next_state [1:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_CLINT $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 32 > araddr [31:0] $end
     $var wire 1 ? arvalid $end
     $var wire 1 "# arready $end
     $var wire 32 @ rdata [31:0] $end
     $var wire 2 v" rresp [1:0] $end
     $var wire 1 "# rvalid $end
     $var wire 1 A rready $end
     $var wire 16 X! mtime[0] [15:0] $end
     $var wire 16 Y! mtime[1] [15:0] $end
     $var wire 16 Z! mtime[2] [15:0] $end
     $var wire 16 [! mtime[3] [15:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_CSR $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 1 T! csr_write $end
     $var wire 3 c csr_read_addr [2:0] $end
     $var wire 3 S! csr_write_addr [2:0] $end
     $var wire 32 O! csr_data [31:0] $end
     $var wire 32 b csr_out [31:0] $end
     $var wire 32 \! mepc [31:0] $end
     $var wire 32 ]! mstatus [31:0] $end
     $var wire 32 ^! mtvec [31:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_EXU $end
     $var wire 32 y pc [31:0] $end
     $var wire 32 z src1 [31:0] $end
     $var wire 32 { src2 [31:0] $end
     $var wire 32 | imm [31:0] $end
     $var wire 4 ~ alu_opcode [3:0] $end
     $var wire 32 y pc_out_exu [31:0] $end
     $var wire 32 v inst_in_exu [31:0] $end
     $var wire 32 v inst_out_exu [31:0] $end
     $var wire 32 } lsu_write_data_in_exu [31:0] $end
     $var wire 32 -! result_out_exu [31:0] $end
     $var wire 32 } lsu_write_data_out_exu [31:0] $end
     $var wire 32 /! branch_target_out_exu [31:0] $end
     $var wire 1 #! is_jalr_in_exu $end
     $var wire 1 *! ebreak_in_exu $end
     $var wire 4 !! rd_in_exu [3:0] $end
     $var wire 1 &! csr_write_in_exu $end
     $var wire 3 "! csr_write_addr_in_exu [2:0] $end
     $var wire 1 )! ecall_in_exu $end
     $var wire 1 +! mret_in_exu $end
     $var wire 1 %! reg_write_in_exu $end
     $var wire 4 !! rd_out_exu [3:0] $end
     $var wire 1 &! csr_write_out_exu $end
     $var wire 3 "! csr_write_addr_out_exu [2:0] $end
     $var wire 1 )! ecall_out_exu $end
     $var wire 1 +! mret_out_exu $end
     $var wire 1 %! reg_write_out_exu $end
     $var wire 3 (! lsu_read_in_exu [2:0] $end
     $var wire 2 '! lsu_write_in_exu [1:0] $end
     $var wire 3 (! lsu_read_out_exu [2:0] $end
     $var wire 2 '! lsu_write_out_exu [1:0] $end
     $var wire 1 $! is_jump_in_exu $end
     $var wire 1 0! is_branch_out_exu $end
     $var wire 1 x is_req_valid_from_idu $end
     $var wire 1 _ is_req_ready_to_idu $end
     $var wire 1 1! is_req_valid_to_lsu $end
     $var wire 1 _ is_req_ready_from_lsu $end
     $var wire 1 ,! fence_i_in_exu $end
     $var wire 1 ,! fence_i_out_exu $end
     $var wire 1 .! is_data_forward_valid_from_exu $end
     $var wire 1 _! is_branch $end
    $upscope $end
    $scope module u_ysyx_25040129_ICACHE $end
     $var wire 32 6# BLOCK_SIZE_WORD_DIG [31:0] $end
     $var wire 32 7# BLOCK_NUM_DIG [31:0] $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 32 P ifu_araddr [31:0] $end
     $var wire 1 R ifu_arvalid $end
     $var wire 1 S ifu_arready $end
     $var wire 32 T ifu_rdata [31:0] $end
     $var wire 2 v" ifu_rresp [1:0] $end
     $var wire 1 U ifu_rvalid $end
     $var wire 1 V ifu_rready $end
     $var wire 32 I out_araddr [31:0] $end
     $var wire 1 J out_arvalid $end
     $var wire 1 K out_arready $end
     $var wire 8 3# out_arlen [7:0] $end
     $var wire 2 4# out_arburst [1:0] $end
     $var wire 32 L out_rdata [31:0] $end
     $var wire 2 v" out_rresp [1:0] $end
     $var wire 1 M out_rvalid $end
     $var wire 1 N out_rready $end
     $var wire 1 O out_rlast $end
     $var wire 1 >! fence_i $end
     $var wire 32 `! ifu_rdata_latch [31:0] $end
     $var wire 32 8# BLOCK_SIZE_WORD [31:0] $end
     $var wire 32 8# BLOCK_SIZE_DIG [31:0] $end
     $var wire 32 6# BLOCK_NUM [31:0] $end
     $var wire 32 a! ifu_araddr_latch [31:0] $end
     $var wire 32 b! cache_data[0][0] [31:0] $end
     $var wire 32 c! cache_data[0][1] [31:0] $end
     $var wire 32 d! cache_data[0][2] [31:0] $end
     $var wire 32 e! cache_data[0][3] [31:0] $end
     $var wire 32 f! cache_data[1][0] [31:0] $end
     $var wire 32 g! cache_data[1][1] [31:0] $end
     $var wire 32 h! cache_data[1][2] [31:0] $end
     $var wire 32 i! cache_data[1][3] [31:0] $end
     $var wire 2 j! cache_valid [1:0] $end
     $var wire 27 k! cache_tag[0] [31:5] $end
     $var wire 27 l! cache_tag[1] [31:5] $end
     $var wire 2 m! state [1:0] $end
     $var wire 2 n! burst_count [1:0] $end
     $var wire 1 o! index [0:0] $end
     $var wire 1 p! p_index [0:0] $end
     $var wire 2 q! offset [1:0] $end
     $var wire 2 r! p_offset [1:0] $end
     $var wire 27 s! tag [26:0] $end
     $var wire 27 t! p_tag [26:0] $end
     $var wire 2 v" IDLE [1:0] $end
     $var wire 2 4# WAIT_IFU_READY [1:0] $end
     $var wire 2 5# WAIT_OUT_READY [1:0] $end
     $var wire 2 9# WAIT_OUT_REQ [1:0] $end
     $var wire 1 u! fence_i_latch $end
    $upscope $end
    $scope module u_ysyx_25040129_IDU $end
     $var wire 32 Z inst [31:0] $end
     $var wire 32 Y pc [31:0] $end
     $var wire 32 Y pc_out_idu [31:0] $end
     $var wire 4 h src1_id [3:0] $end
     $var wire 4 i src2_id [3:0] $end
     $var wire 3 c csr_read_id_out_idu [2:0] $end
     $var wire 3 d csr_write_id_out_idu [2:0] $end
     $var wire 32 ` src1_in_idu_reg [31:0] $end
     $var wire 32 a src2_in_idu_reg [31:0] $end
     $var wire 32 b csr_in_idu [31:0] $end
     $var wire 32 Z inst_out_idu [31:0] $end
     $var wire 32 e src1_out_idu [31:0] $end
     $var wire 32 f src2_out_idu [31:0] $end
     $var wire 32 g lsu_write_data_out_idu [31:0] $end
     $var wire 1 ] is_jalr_out_idu $end
     $var wire 32 j imm [31:0] $end
     $var wire 4 k rd_out_idu [3:0] $end
     $var wire 4 l alu_opcode [3:0] $end
     $var wire 1 m reg_write_out_idu $end
     $var wire 2 n lsu_write_out_idu [1:0] $end
     $var wire 3 o lsu_read_out_idu [2:0] $end
     $var wire 1 p ecall_out_idu $end
     $var wire 1 q is_jump_out_idu $end
     $var wire 1 r ebreak_out_idu $end
     $var wire 1 s mret_out_idu $end
     $var wire 1 t csr_write_out_idu $end
     $var wire 1 [ is_req_valid_from_ifu $end
     $var wire 1 W is_req_ready_to_ifu $end
     $var wire 1 ^ is_req_valid_to_exu $end
     $var wire 1 w is_req_ready_from_exu $end
     $var wire 1 u fence_i $end
     $var wire 4 !! rd_idu_pip_exu [3:0] $end
     $var wire 1 v! valid_rd_write_idu_pip_exu $end
     $var wire 4 8! rd_exu_pip_lsu [3:0] $end
     $var wire 1 w! valid_rd_write_exu_pip_lsu $end
     $var wire 4 P! rd_lsu_pip_wbu [3:0] $end
     $var wire 1 x! valid_rd_write_lsu_pip_wbu $end
     $var wire 3 "! csr_addr_idu_pip_exu [2:0] $end
     $var wire 1 y! valid_csr_addr_write_idu_pip_exu $end
     $var wire 3 ?! csr_addr_exu_pip_lsu [2:0] $end
     $var wire 1 z! valid_csr_addr_write_exu_pip_lsu $end
     $var wire 3 S! csr_addr_lsu_pip_wbu [2:0] $end
     $var wire 1 T! valid_csr_addr_write_lsu_pip_wbu $end
     $var wire 32 -! exu_forward_data [31:0] $end
     $var wire 1 .! is_exu_forward_valid $end
     $var wire 32 @! lsu_forward_data [31:0] $end
     $var wire 1 2! is_lsu_forward_valid $end
     $var wire 32 O! wbu_forward_data [31:0] $end
     $var wire 1 K! is_wbu_forward_valid $end
     $var wire 1 {! is_src1_raw $end
     $var wire 1 |! is_src2_raw $end
     $var wire 1 }! is_csr_raw $end
     $var wire 1 ~! raw $end
     $var wire 1 !" is_csrr $end
     $var wire 1 "" is_src1_from_reg $end
     $var wire 1 #" is_src2_from_reg $end
     $var wire 32 $" src1_in_idu [31:0] $end
     $var wire 32 g src2_in_idu [31:0] $end
     $var wire 1 %" src1_raw_with_exu $end
     $var wire 1 &" use_src1_from_exu $end
     $var wire 1 '" src2_raw_with_exu $end
     $var wire 1 (" use_src2_from_exu $end
     $var wire 1 )" src1_raw_with_lsu $end
     $var wire 1 *" use_src1_from_lsu $end
     $var wire 1 +" src2_raw_with_lsu $end
     $var wire 1 ," use_src2_from_lsu $end
     $var wire 1 -" src1_raw_with_wbu $end
     $var wire 1 ." use_src1_from_wbu $end
     $var wire 1 /" src2_raw_with_wbu $end
     $var wire 1 0" use_src2_from_wbu $end
     $var wire 1 1" funct7_5 $end
     $var wire 3 2" funct3 [2:0] $end
     $var wire 7 3" opcode [6:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_IFU $end
     $var wire 1 t" rst $end
     $var wire 1 s" clk $end
     $var wire 32 6! pipeline_flush_target [31:0] $end
     $var wire 1 N! pipeline_flush $end
     $var wire 1 \ is_req_ready_from_idu $end
     $var wire 32 P pc [31:0] $end
     $var wire 32 Q inst_to_idu [31:0] $end
     $var wire 1 X is_req_valid_to_idu $end
     $var wire 32 P araddr [31:0] $end
     $var wire 1 R arvalid $end
     $var wire 1 S arready $end
     $var wire 32 T rdata [31:0] $end
     $var wire 2 v" rresp [1:0] $end
     $var wire 1 U rvalid $end
     $var wire 1 V rready $end
     $var wire 1 4" get_flush_signal_in_fetching $end
     $var wire 32 5" flush_target_latch [31:0] $end
     $var wire 32 6" inst [31:0] $end
     $var wire 3 7" state [2:0] $end
     $var wire 3 x" WAIT_MMEM_READY [2:0] $end
     $var wire 3 y" WAIT_MMEM_REQ [2:0] $end
     $var wire 3 z" WAIT_IDU_READY [2:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_LSU $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 32 6! branch_target_in_lsu [31:0] $end
     $var wire 32 6! branch_target_out_lsu [31:0] $end
     $var wire 32 A! pc_in_lsu [31:0] $end
     $var wire 32 A! pc_out_lsu [31:0] $end
     $var wire 32 B! inst_in_lsu [31:0] $end
     $var wire 32 B! inst_out_lsu [31:0] $end
     $var wire 1 C! is_device $end
     $var wire 3 4! mmem_read_in_lsu [2:0] $end
     $var wire 2 5! mmem_write_in_lsu [1:0] $end
     $var wire 32 + result_in_lsu [31:0] $end
     $var wire 32 @! result_out_lsu [31:0] $end
     $var wire 1 3! is_req_valid_from_exu $end
     $var wire 1 2! is_req_ready_to_exu $end
     $var wire 32 7! mmem_write_data_in_lsu [31:0] $end
     $var wire 32 + araddr [31:0] $end
     $var wire 1 E! arvalid $end
     $var wire 1 G! arready $end
     $var wire 3 F! arsize [2:0] $end
     $var wire 32 H! rdata [31:0] $end
     $var wire 2 v" rresp [1:0] $end
     $var wire 1 I! rvalid $end
     $var wire 1 J! rready $end
     $var wire 32 + awaddr [31:0] $end
     $var wire 1 , awvalid $end
     $var wire 1 - awready $end
     $var wire 4 . wstrb [3:0] $end
     $var wire 32 / wdata [31:0] $end
     $var wire 1 0 wvalid $end
     $var wire 1 1 wready $end
     $var wire 2 v" bresp [1:0] $end
     $var wire 1 2 bvalid $end
     $var wire 1 3 bready $end
     $var wire 1 2! is_req_valid_to_wbu $end
     $var wire 1 "# is_req_ready_from_wbu $end
     $var wire 1 9! ecall_in_lsu $end
     $var wire 1 9! ecall_out_lsu $end
     $var wire 1 =! reg_write_in_lsu $end
     $var wire 1 =! reg_write_out_lsu $end
     $var wire 4 8! rd_in_lsu [3:0] $end
     $var wire 4 8! rd_out_lsu [3:0] $end
     $var wire 1 <! csr_write_in_lsu $end
     $var wire 1 <! csr_write_out_lsu $end
     $var wire 3 ?! csr_addr_in_lsu [2:0] $end
     $var wire 3 ?! csr_addr_out_lsu [2:0] $end
     $var wire 1 :! mret_in_lsu $end
     $var wire 1 :! mret_out_lsu $end
     $var wire 1 ;! is_branch_in_lsu $end
     $var wire 1 ;! is_branch_out_lsu $end
     $var wire 1 >! fence_i_in_lsu $end
     $var wire 1 >! fence_i_out_lsu $end
     $var wire 1 2! is_data_forward_valid_from_lsu $end
     $var wire 3 x" IDLE [2:0] $end
     $var wire 3 y" WAIT_REQ_READ [2:0] $end
     $var wire 3 z" WAIT_REQ_AW_WRITE [2:0] $end
     $var wire 3 :# WAIT_RSP_READ [2:0] $end
     $var wire 3 {" WAIT_RSP_WRITE [2:0] $end
     $var wire 3 |" WAIT_WBU_READY [2:0] $end
     $var wire 3 ;# WAIT_REQ_W_WRITE [2:0] $end
     $var wire 3 <# WAIT_REQ_WRITE [2:0] $end
     $var wire 3 8" state [2:0] $end
     $var wire 3 9" next_state [2:0] $end
     $var wire 32 :" processed_rdata [31:0] $end
     $var wire 2 ;" offset [1:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_PIPELINE_EXU_TO_LSU $end
     $var wire 32 =# DATA_WIDTH [31:0] $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 1 N! pipeline_flush $end
     $var wire 1 1! in_valid $end
     $var wire 1 _ in_ready $end
     $var wire 178 <" in_data [177:0] $end
     $var wire 1 3! out_valid $end
     $var wire 1 2! out_ready $end
     $var wire 178 B" out_data [177:0] $end
     $var wire 1 ># EMPTY [0:0] $end
     $var wire 1 ?# FULL [0:0] $end
     $var wire 1 3! state $end
    $upscope $end
    $scope module u_ysyx_25040129_PIPELINE_IDU_TO_EXU $end
     $var wire 32 @# DATA_WIDTH [31:0] $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 1 N! pipeline_flush $end
     $var wire 1 ^ in_valid $end
     $var wire 1 w in_ready $end
     $var wire 216 H" in_data [215:0] $end
     $var wire 1 x out_valid $end
     $var wire 1 _ out_ready $end
     $var wire 216 O" out_data [215:0] $end
     $var wire 1 ># EMPTY [0:0] $end
     $var wire 1 ?# FULL [0:0] $end
     $var wire 1 x state $end
    $upscope $end
    $scope module u_ysyx_25040129_PIPELINE_IFU_TO_IDU $end
     $var wire 32 A# DATA_WIDTH [31:0] $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 1 N! pipeline_flush $end
     $var wire 1 X in_valid $end
     $var wire 1 \ in_ready $end
     $var wire 64 V" in_data [63:0] $end
     $var wire 1 [ out_valid $end
     $var wire 1 W out_ready $end
     $var wire 64 X" out_data [63:0] $end
     $var wire 1 ># EMPTY [0:0] $end
     $var wire 1 ?# FULL [0:0] $end
     $var wire 1 [ state $end
    $upscope $end
    $scope module u_ysyx_25040129_PIPELINE_LSU_TO_WBU $end
     $var wire 32 B# DATA_WIDTH [31:0] $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 1 }" pipeline_flush $end
     $var wire 1 2! in_valid $end
     $var wire 1 "# in_ready $end
     $var wire 106 Z" in_data [105:0] $end
     $var wire 1 K! out_valid $end
     $var wire 1 K! out_ready $end
     $var wire 106 ^" out_data [105:0] $end
     $var wire 1 ># EMPTY [0:0] $end
     $var wire 1 ?# FULL [0:0] $end
     $var wire 1 K! state $end
    $upscope $end
    $scope module u_ysyx_25040129_REG $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 4 P! rd [3:0] $end
     $var wire 4 h src1_id [3:0] $end
     $var wire 4 i src2_id [3:0] $end
     $var wire 1 U! reg_write $end
     $var wire 32 O! result [31:0] $end
     $var wire 32 ` src1 [31:0] $end
     $var wire 32 a src2 [31:0] $end
     $var wire 32 b" regs[1] [31:0] $end
     $var wire 32 c" regs[2] [31:0] $end
     $var wire 32 d" regs[3] [31:0] $end
     $var wire 32 e" regs[4] [31:0] $end
     $var wire 32 f" regs[5] [31:0] $end
     $var wire 32 g" regs[6] [31:0] $end
     $var wire 32 h" regs[7] [31:0] $end
     $var wire 32 i" regs[8] [31:0] $end
     $var wire 32 j" regs[9] [31:0] $end
     $var wire 32 k" regs[10] [31:0] $end
     $var wire 32 l" regs[11] [31:0] $end
     $var wire 32 m" regs[12] [31:0] $end
     $var wire 32 n" regs[13] [31:0] $end
     $var wire 32 o" regs[14] [31:0] $end
     $var wire 32 p" regs[15] [31:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_WBU $end
     $var wire 1 K! is_req_valid_from_lsu $end
     $var wire 1 K! is_req_ready_to_lsu $end
     $var wire 4 P! rd_in_wbu [3:0] $end
     $var wire 32 L! pc_in_wbu [31:0] $end
     $var wire 32 M! inst_in_wbu [31:0] $end
     $var wire 1 D! is_device_in_wbu $end
     $var wire 32 O! result_in_wbu [31:0] $end
     $var wire 3 S! csr_addr_in_wbu [2:0] $end
     $var wire 1 R! csr_write_in_wbu $end
     $var wire 1 Q! reg_write_in_wbu $end
     $var wire 4 P! rd_out_wbu [3:0] $end
     $var wire 32 O! result_out_wbu [31:0] $end
     $var wire 1 T! csr_write_out_wbu $end
     $var wire 3 S! csr_addr_out_wbu [2:0] $end
     $var wire 1 U! reg_write_out_wbu $end
     $var wire 1 K! is_data_forward_valid_from_wbu $end
     $var wire 32 O! wbu_forward_data [31:0] $end
    $upscope $end
    $scope module u_ysyx_25040129_XBAR $end
     $var wire 1 s" clk $end
     $var wire 1 t" rst $end
     $var wire 32 C araddr [31:0] $end
     $var wire 1 D arvalid $end
     $var wire 3 B arsize [2:0] $end
     $var wire 1 H arready $end
     $var wire 8 & arlen [7:0] $end
     $var wire 2 = arburst [1:0] $end
     $var wire 32 F rdata [31:0] $end
     $var wire 2 v" rresp [1:0] $end
     $var wire 1 G rvalid $end
     $var wire 1 E rready $end
     $var wire 1 * rlast $end
     $var wire 32 + awaddr [31:0] $end
     $var wire 1 , awvalid $end
     $var wire 1 - awready $end
     $var wire 4 . wstrb [3:0] $end
     $var wire 32 / wdata [31:0] $end
     $var wire 1 0 wvalid $end
     $var wire 1 1 wready $end
     $var wire 2 v" bresp [1:0] $end
     $var wire 1 2 bvalid $end
     $var wire 1 3 bready $end
     $var wire 32 # soc_araddr [31:0] $end
     $var wire 1 $ soc_arvalid $end
     $var wire 3 < soc_arsize [2:0] $end
     $var wire 1 % soc_arready $end
     $var wire 8 & soc_arlen [7:0] $end
     $var wire 2 = soc_arburst [1:0] $end
     $var wire 32 ' soc_rdata [31:0] $end
     $var wire 2 v" soc_rresp [1:0] $end
     $var wire 1 ( soc_rvalid $end
     $var wire 1 ) soc_rready $end
     $var wire 1 * soc_rlast $end
     $var wire 32 + soc_awaddr [31:0] $end
     $var wire 1 , soc_awvalid $end
     $var wire 1 - soc_awready $end
     $var wire 4 . soc_wstrb [3:0] $end
     $var wire 32 / soc_wdata [31:0] $end
     $var wire 1 0 soc_wvalid $end
     $var wire 1 1 soc_wready $end
     $var wire 2 v" soc_bresp [1:0] $end
     $var wire 1 2 soc_bvalid $end
     $var wire 1 3 soc_bready $end
     $var wire 32 > rtc_araddr [31:0] $end
     $var wire 1 ? rtc_arvalid $end
     $var wire 1 "# rtc_arready $end
     $var wire 32 @ rtc_rdata [31:0] $end
     $var wire 2 v" rtc_rresp [1:0] $end
     $var wire 1 "# rtc_rvalid $end
     $var wire 1 A rtc_rready $end
     $var wire 3 x" IDLE [2:0] $end
     $var wire 3 y" HANDLE_SOC [2:0] $end
     $var wire 3 :# HANDLE_RTC [2:0] $end
     $var wire 3 q" state [2:0] $end
     $var wire 3 r" next_state [2:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
0$
1%
b00000000 &
b00000000000000000000000000000000 '
0(
0)
0*
b00000000000000000000000000000000 +
0,
1-
b0000 .
b11011110101011011011111011101111 /
00
11
02
03
b00000000000000000000000000000000 4
b00000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b0000 8
b000 9
b000 :
b00000000 ;
b000 <
b00 =
b00000000000000000000000000000000 >
0?
b00000000000000000000000000000000 @
0A
b000 B
b00000000000000000000000000000000 C
0D
0E
b00000000000000000000000000000000 F
0G
0H
b00000000000000000000000000000000 I
0J
0K
b00000000000000000000000000000000 L
0M
0N
0O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
1R
1S
b00000000000000000000000000000000 T
0U
1V
1W
0X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
0[
1\
0]
0^
1_
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b000 c
b000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b0000 h
b0000 i
b00000000000000000000000000000000 j
b0000 k
b0000 l
0m
b00 n
b000 o
0p
0q
0r
0s
0t
0u
b00000000000000000000000000000000 v
1w
0x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b0000 ~
b0000 !!
b000 "!
0#!
0$!
0%!
0&!
b00 '!
b000 (!
0)!
0*!
0+!
0,!
b00000000000000000000000000000000 -!
1.!
b00000000000000000000000000000000 /!
00!
01!
02!
03!
b000 4!
b00 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b0000 8!
09!
0:!
0;!
0<!
0=!
0>!
b000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
0C!
0D!
0E!
b000 F!
0G!
b00000000000000000000000000000000 H!
0I!
0J!
0K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
0N!
b00000000000000000000000000000000 O!
b0000 P!
0Q!
0R!
b000 S!
0T!
0U!
b00 V!
b00 W!
b0000000000000000 X!
b0000000000000000 Y!
b0000000000000000 Z!
b0000000000000000 [!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
0_!
b00000000000000000000000000000000 `!
b00000000000000000000000000000000 a!
b00000000000000000000000000000000 b!
b00000000000000000000000000000000 c!
b00000000000000000000000000000000 d!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 f!
b00000000000000000000000000000000 g!
b00000000000000000000000000000000 h!
b00000000000000000000000000000000 i!
b00 j!
b000000000000000000000000000 k!
b000000000000000000000000000 l!
b00 m!
b00 n!
0o!
0p!
b00 q!
b00 r!
b000000000000000000000000000 s!
b000000000000000000000000000 t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0!"
0""
0#"
b00000000000000000000000000000000 $"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
b000 2"
b0000000 3"
04"
b00000000000000000000000000000000 5"
b00000000000000000000000000000000 6"
b000 7"
b000 8"
b000 9"
b00000000000000000000000000000000 :"
b00 ;"
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 <"
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 B"
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 H"
b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 O"
b0000000000000000000000000000000000000000000000000000000000000000 V"
b0000000000000000000000000000000000000000000000000000000000000000 X"
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Z"
b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ^"
b00000000000000000000000000000000 b"
b00000000000000000000000000000000 c"
b00000000000000000000000000000000 d"
b00000000000000000000000000000000 e"
b00000000000000000000000000000000 f"
b00000000000000000000000000000000 g"
b00000000000000000000000000000000 h"
b00000000000000000000000000000000 i"
b00000000000000000000000000000000 j"
b00000000000000000000000000000000 k"
b00000000000000000000000000000000 l"
b00000000000000000000000000000000 m"
b00000000000000000000000000000000 n"
b00000000000000000000000000000000 o"
b00000000000000000000000000000000 p"
b000 q"
b000 r"
0s"
1t"
b00 u"
b00 v"
b00001 w"
b000 x"
b001 y"
b010 z"
b100 {"
b101 |"
0}"
b0000 ~"
b00000000 !#
1"#
0##
b00000000000000000000000000000000 $#
0%#
0&#
b0000 '#
b00 (#
0)#
0*#
b0000 +#
b00000000000000000000000000000000 ,#
b00 -#
0.#
0/#
00#
01#
b00 2#
b00000011 3#
b01 4#
b10 5#
b00000000000000000000000000000010 6#
b00000000000000000000000000000001 7#
b00000000000000000000000000000100 8#
b11 9#
b011 :#
b110 ;#
b111 <#
b00000000000000000000000010110010 =#
0>#
1?#
b00000000000000000000000011011000 @#
b00000000000000000000000001000000 A#
b00000000000000000000000001101010 B#
#1
b00110000000000000000000000000000 P
b001100000000000000000000000 t!
b0011000000000000000000000000000000000000000000000000000000000000 V"
1s"
#2
0s"
#3
1s"
#4
0s"
#5
1s"
#6
0s"
#7
1s"
#8
0s"
#9
1s"
#10
0s"
#11
1s"
#12
0s"
#13
1s"
#14
0s"
#15
1s"
#16
0s"
#17
1s"
#18
0s"
#19
1s"
#20
0s"
0t"
#21
b00000000000000000000000000000001 @
b00110000000000000000000000000000 I
1J
0R
0S
b01 W!
b0000000000000001 X!
b00110000000000000000000000000000 a!
b10 m!
b001100000000000000000000000 s!
b001 7"
1s"
#22
0s"
#23
b00000011 &
b01 =
b00000000000000000000000000000010 @
b010 B
b00110000000000000000000000000000 C
1D
b01 V!
b0000000000000010 X!
b001 r"
1s"
#24
0s"
#25
b00110000000000000000000000000000 #
1$
b010 <
b00000000000000000000000000000011 @
1H
1K
b0000000000000011 X!
b001 q"
1s"
#26
0s"
#27
0$
0%
b01110000010000000000000100010111 '
1(
1)
b00110000000000000000000000000000 4
b00000011 5
b001 9
b00000000000000000000000000000100 @
0D
1E
b01110000010000000000000100010111 F
1G
0H
0J
0K
b01110000010000000000000100010111 L
1M
1N
b0000000000000100 X!
b11 m!
1s"
#28
0s"
#29
b01011110000000010000000100010011 '
b00110000000000000000000000000100 4
b00000001 ;
b00000000000000000000000000000101 @
b01011110000000010000000100010011 F
b01011110000000010000000100010011 L
b01110000010000000000000100010111 T
b0000000000000101 X!
b01110000010000000000000100010111 `!
b01110000010000000000000100010111 b!
b01 n!
1s"
#30
0s"
#31
b00000000000000000000010000010011 '
b00110000000000000000000000001000 4
b00000010 ;
b00000000000000000000000000000110 @
b00000000000000000000010000010011 F
b00000000000000000000010000010011 L
b0000000000000110 X!
b01011110000000010000000100010011 c!
b10 n!
1s"
#32
0s"
#33
b01110000000000000000011110010111 '
1*
b00110000000000000000000000001100 4
b00000011 ;
b00000000000000000000000000000111 @
b01110000000000000000011110010111 F
b01110000000000000000011110010111 L
1O
b00 W!
b0000000000000111 X!
b00000000000000000000010000010011 d!
b11 n!
b000 r"
1s"
#34
0s"
#35
b00000000000000000000000000000000 #
1%
b00000000 &
0(
0)
0*
b000 9
b000 <
b00 =
b00000000000000000000000000001000 @
b000 B
b00000000000000000000000000000000 C
0E
b00000000000000000000000000000000 F
0G
b00000000000000000000000000000000 L
0M
0N
0O
1U
b00 V!
b0000000000001000 X!
b01110000000000000000011110010111 e!
b01 j!
b001100000000000000000000000 k!
b01 m!
b00 n!
b000 q"
1s"
#36
0s"
#37
b00000000000000000000000000001001 @
b01110000010000000000000100010111 Q
1S
0U
0V
1X
b0000000000001001 X!
b00 m!
b01110000010000000000000100010111 6"
b010 7"
b0011000000000000000000000000000001110000010000000000000100010111 V"
1s"
#38
0s"
#39
b00000000000000000000000000001010 @
b00110000000000000000000000000100 P
b01011110000000010000000100010011 Q
1R
b01011110000000010000000100010011 T
1U
1V
b00110000000000000000000000000000 Y
b01110000010000000000000100010111 Z
1[
1^
b00110000000000000000000000000000 e
b01110000010000000000000000000000 f
b0100 i
b01110000010000000000000000000000 j
b0010 k
1m
b0000000000001010 X!
b01 r!
11"
b0010111 3"
b000 7"
b001100000000000000000000000000000011000000000000000000000000000001110000010000000000000000000000011100000100000000000000000000000000000000000000000000000000000000000010001000000000000001110000010000000000000100010111 H"
b0011000000000000000000000000010001011110000000010000000100010011 V"
b0011000000000000000000000000000001110000010000000000000100010111 X"
1s"
#40
0s"
#41
b00000000000000000000000000001011 @
b00110000000000000000000000001000 P
b00000000000000000000010000010011 Q
b00000000000000000000010000010011 T
b00110000000000000000000000000100 Y
b01011110000000010000000100010011 Z
b10100000010000000000000000000000 e
b00000000000000000000010111100000 f
b0010 h
b0000 i
b00000000000000000000010111100000 j
b01110000010000000000000100010111 v
1x
b00110000000000000000000000000000 y
b00110000000000000000000000000000 z
b01110000010000000000000000000000 {
b01110000010000000000000000000000 |
b0010 !!
1%!
b10100000010000000000000000000000 -!
b10100000010000000000000000000000 /!
11!
b0000000000001011 X!
b01011110000000010000000100010011 `!
b00110000000000000000000000000100 a!
b01 q!
b10 r!
1v!
1""
b10100000010000000000000000000000 $"
1%"
1&"
b0010011 3"
b01011110000000010000000100010011 6"
b0000010100000010000000000000000000000101000000100000000000000000000000000000000000000000000000000000000100000100000011000000000000000000000000000001110000010000000000000100010111 <"
b001100000000000000000000000001001010000001000000000000000000000000000000000000000000010111100000000000000000000000000101111000000000000000000000000000000000000000000010001000000000000001011110000000010000000100010011 H"
b001100000000000000000000000000000011000000000000000000000000000001110000010000000000000000000000011100000100000000000000000000000000000000000000000000000000000000000010001000000000000001110000010000000000000100010111 O"
b0011000000000000000000000000100000000000000000000000010000010011 V"
b0011000000000000000000000000010001011110000000010000000100010011 X"
1s"
#42
0s"
#43
b10100000010000000000000000000000 +
b00000000000000000000000000001100 @
b00110000000000000000000000001100 P
b01110000000000000000011110010111 Q
b01110000000000000000011110010111 T
b00110000000000000000000000001000 Y
b00000000000000000000010000010011 Z
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b0000 h
b00000000000000000000000000000000 j
b1000 k
b01011110000000010000000100010011 v
b00110000000000000000000000000100 y
b10100000010000000000000000000000 z
b00000000000000000000010111100000 {
b00000000000000000000010111100000 |
b10100000010000000000010111100000 -!
b00110000000000000000010111100100 /!
12!
13!
b10100000010000000000000000000000 6!
b0010 8!
1=!
b10100000010000000000000000000000 @!
b00110000000000000000000000000000 A!
b01110000010000000000000100010111 B!
b0000000000001100 X!
b00000000000000000000010000010011 `!
b00110000000000000000000000001000 a!
b10 q!
b11 r!
1w!
b00000000000000000000000000000000 $"
0%"
0&"
01"
b00000000000000000000010000010011 6"
b0000000110000000000000000010111100100101000000100000000000101111000000000000000000000000000000000000000100000100000011000000000000000000000000010001011110000000010000000100010011 <"
b0000010100000010000000000000000000000101000000100000000000000000000000000000000000000000000000000000000100000100000011000000000000000000000000000001110000010000000000000100010111 B"
b001100000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000000000000000000000000000000000010000010011 H"
b001100000000000000000000000001001010000001000000000000000000000000000000000000000000010111100000000000000000000000000101111000000000000000000000000000000000000000000010001000000000000001011110000000010000000100010011 O"
b0011000000000000000000000000110001110000000000000000011110010111 V"
b0011000000000000000000000000100000000000000000000000010000010011 X"
b1010000001000000000000000000000000101000110000000000000000000000000000011100000100000000000001000101110000 Z"
1s"
#44
0s"
#45
b10100000010000000000010111100000 +
b00000000000000000000000000001101 @
b00110000000000000000000000010000 P
0U
0X
b00110000000000000000000000001100 Y
b01110000000000000000011110010111 Z
b00110000000000000000000000001100 e
b01110000000000000000000000000000 f
b01110000000000000000000000000000 j
b1111 k
b00000000000000000000010000010011 v
b00110000000000000000000000001000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b1000 !!
b00000000000000000000000000000000 -!
b00110000000000000000000000001000 /!
b00110000000000000000010111100100 6!
b10100000010000000000010111100000 @!
b00110000000000000000000000000100 A!
b01011110000000010000000100010011 B!
1K!
b00110000000000000000000000000000 L!
b01110000010000000000000100010111 M!
b10100000010000000000000000000000 O!
b0010 P!
1Q!
1U!
b0000000000001101 X!
b01110000000000000000011110010111 `!
b00110000000000000000000000001100 a!
1p!
b11 q!
b00 r!
1x!
0""
11"
b0010111 3"
b01110000000000000000011110010111 6"
b0000000110000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000010000000100000011000000000000000000000000100000000000000000000000010000010011 <"
b0000000110000000000000000010111100100101000000100000000000101111000000000000000000000000000000000000000100000100000011000000000000000000000000010001011110000000010000000100010011 B"
b001100000000000000000000000011000011000000000000000000000000110001110000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000001111001000000000000001110000000000000000011110010111 H"
b001100000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000000000000000000000000000000000010000010011 O"
b0011000000000000000000000001000001110000000000000000011110010111 V"
b0011000000000000000000000000110001110000000000000000011110010111 X"
b1010000001000000000001011110000000101000110000000000000000000000000100010111100000000100000001000100110000 Z"
b1010000001000000000000000000000000101000110000000000000000000000000000011100000100000000000001000101110000 ^"
1s"
#46
0s"
#47
b00000000000000000000000000000000 +
b00000000000000000000000000001110 @
b00110000000000000000000000010000 I
1J
0R
0S
0[
0^
b01110000000000000000011110010111 v
b00110000000000000000000000001100 y
b00110000000000000000000000001100 z
b01110000000000000000000000000000 {
b01110000000000000000000000000000 |
b1111 !!
b10100000000000000000000000001100 -!
b10100000000000000000000000001100 /!
b00110000000000000000000000001000 6!
b1000 8!
b00000000000000000000000000000000 @!
b00110000000000000000000000001000 A!
b00000000000000000000010000010011 B!
b00110000000000000000000000000100 L!
b01011110000000010000000100010011 M!
b10100000010000000000010111100000 O!
b01 W!
b0000000000001110 X!
b00110000000000000000000000010000 a!
b10 m!
1o!
b00 q!
b001 7"
b0000010100000000000000000000000001100101000000000000000000000000011000000000000000000000000000000000011110000100000011000000000000000000000000110001110000000000000000011110010111 <"
b0000000110000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000010000000100000011000000000000000000000000100000000000000000000000010000010011 B"
b001100000000000000000000000011000011000000000000000000000000110001110000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000001111001000000000000001110000000000000000011110010111 O"
b0000000000000000000000000000000010001000110000000000000000000000001000000000000000000000000100000100110000 Z"
b1010000001000000000001011110000000101000110000000000000000000000000100010111100000000100000001000100110000 ^"
b10100000010000000000000000000000 c"
1s"
